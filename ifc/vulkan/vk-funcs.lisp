;;; this file is automatically generated, do not edit
#||
"Copyright (c) 2015-2017 The Khronos Group Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and/or associated documentation files (the
\"Materials\"), to deal in the Materials without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Materials, and to
permit persons to whom the Materials are furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Materials.

THE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

------------------------------------------------------------------------"
||#

;; Changes (into Lisp) Copyright 2019 Andrew Kenneth Wolven
;; <awolven@gmail.com>
;; 
;; Permission is hereby granted, free of charge, to any person obtaining
;; a copy of this software and associated documentation files (the
;; "Software"), to deal in the Software without restriction, including
;; without limitation the rights to use, copy, modify, merge, publish,
;; distribute, sublicense, and/or sell copies of the Software, and to
;; permit persons to whom the Software is furnished to do so, subject to
;; the following conditions:
;; 
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;; 
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
;; LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
;; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
;; WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(cl:in-package #:%vk)

(defvkdevextfun ("vkAcquireNextImage2KHX" vkAcquireNextImage2KHX) VkResult
  (device VkDevice)
  (pAcquireInfo (:pointer (:struct VkAcquireNextImageInfoKHX)))
  (pImageIndex (:pointer :uint32)))

(cffi:defcfun ("vkAcquireNextImageKHR" vkAcquireNextImageKHR) VkResult
  (device VkDevice)
  (swapchain VkSwapchainKHR) ;; :EXTERNSYNC "true"
  (timeout :uint64)
  (semaphore VkSemaphore) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (fence VkFence) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pImageIndex (:pointer :uint32)))

(defvkinstextfun ("vkAcquireXlibDisplayEXT" vkAcquireXlibDisplayEXT) VkResult
  (physicalDevice VkPhysicalDevice)
  (dpy (:pointer Display))
  (display VkDisplayKHR))

(cffi:defcfun ("vkAllocateCommandBuffers" vkAllocateCommandBuffers) VkResult
  (device VkDevice)
  (pAllocateInfo (:pointer (:struct VkCommandBufferAllocateInfo))) ;; :EXTERNSYNC "pAllocateInfo::commandPool"
  (pCommandBuffers (:pointer VkCommandBuffer)) ;; :LEN "pAllocateInfo::commandBufferCount"
)

(cffi:defcfun ("vkAllocateDescriptorSets" vkAllocateDescriptorSets) VkResult
  (device VkDevice)
  (pAllocateInfo (:pointer (:struct VkDescriptorSetAllocateInfo))) ;; :EXTERNSYNC "pAllocateInfo::descriptorPool"
  (pDescriptorSets (:pointer VkDescriptorSet)) ;; :LEN "pAllocateInfo::descriptorSetCount"
)

(cffi:defcfun ("vkAllocateMemory" vkAllocateMemory) VkResult
  (device VkDevice)
  (pAllocateInfo (:pointer (:struct VkMemoryAllocateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pMemory (:pointer VkDeviceMemory)))

(cffi:defcfun ("vkBeginCommandBuffer" vkBeginCommandBuffer) VkResult
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (pBeginInfo (:pointer (:struct VkCommandBufferBeginInfo))))

(cffi:defcfun ("vkBindBufferMemory" vkBindBufferMemory) VkResult
  (device VkDevice)
  (buffer VkBuffer) ;; :EXTERNSYNC "true"
  (memory VkDeviceMemory)
  (memoryOffset VkDeviceSize))

(defvkdevextfun ("vkBindBufferMemory2KHX" vkBindBufferMemory2KHX) VkResult
  (device VkDevice)
  (bindInfoCount :uint32)
  (pBindInfos (:pointer (:struct VkBindBufferMemoryInfoKHX))) ;; :LEN "bindInfoCount"
)

(cffi:defcfun ("vkBindImageMemory" vkBindImageMemory) VkResult
  (device VkDevice)
  (image VkImage) ;; :EXTERNSYNC "true"
  (memory VkDeviceMemory)
  (memoryOffset VkDeviceSize))

(defvkdevextfun ("vkBindImageMemory2KHX" vkBindImageMemory2KHX) VkResult
  (device VkDevice)
  (bindInfoCount :uint32)
  (pBindInfos (:pointer (:struct VkBindImageMemoryInfoKHX))) ;; :LEN "bindInfoCount"
)

(cffi:defcfun ("vkCmdBeginQuery" vkCmdBeginQuery) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (queryPool VkQueryPool)
  (query :uint32)
  (flags VkQueryControlFlags) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkCmdBeginRenderPass" vkCmdBeginRenderPass) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (pRenderPassBegin (:pointer (:struct VkRenderPassBeginInfo)))
  (contents VkSubpassContents))

(cffi:defcfun ("vkCmdBindDescriptorSets" vkCmdBindDescriptorSets) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (pipelineBindPoint VkPipelineBindPoint)
  (layout VkPipelineLayout)
  (firstSet :uint32)
  (descriptorSetCount :uint32)
  (pDescriptorSets (:pointer VkDescriptorSet)) ;; :LEN "descriptorSetCount"
  (dynamicOffsetCount :uint32) ;; :OPTIONAL "true"
  (pDynamicOffsets (:pointer :uint32)) ;; :LEN "dynamicOffsetCount"
)

(cffi:defcfun ("vkCmdBindIndexBuffer" vkCmdBindIndexBuffer) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (buffer VkBuffer)
  (offset VkDeviceSize)
  (indexType VkIndexType))

(cffi:defcfun ("vkCmdBindPipeline" vkCmdBindPipeline) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (pipelineBindPoint VkPipelineBindPoint)
  (pipeline VkPipeline))

(cffi:defcfun ("vkCmdBindVertexBuffers" vkCmdBindVertexBuffers) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (firstBinding :uint32)
  (bindingCount :uint32)
  (pBuffers (:pointer VkBuffer)) ;; :LEN "bindingCount"
  (pOffsets (:pointer VkDeviceSize)) ;; :LEN "bindingCount"
)

(cffi:defcfun ("vkCmdBlitImage" vkCmdBlitImage) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (srcImage VkImage)
  (srcImageLayout VkImageLayout)
  (dstImage VkImage)
  (dstImageLayout VkImageLayout)
  (regionCount :uint32)
  (pRegions (:pointer (:struct VkImageBlit))) ;; :LEN "regionCount"
  (filter VkFilter))

(cffi:defcfun ("vkCmdClearAttachments" vkCmdClearAttachments) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (attachmentCount :uint32)
  (pAttachments (:pointer (:struct VkClearAttachment))) ;; :LEN "attachmentCount"
  (rectCount :uint32)
  (pRects (:pointer (:struct VkClearRect))) ;; :LEN "rectCount"
)

(cffi:defcfun ("vkCmdClearColorImage" vkCmdClearColorImage) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (image VkImage)
  (imageLayout VkImageLayout)
  (pColor (:pointer (:union VkClearColorValue)))
  (rangeCount :uint32)
  (pRanges (:pointer (:struct VkImageSubresourceRange))) ;; :LEN "rangeCount"
)

(cffi:defcfun ("vkCmdClearDepthStencilImage" vkCmdClearDepthStencilImage) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (image VkImage)
  (imageLayout VkImageLayout)
  (pDepthStencil (:pointer (:struct VkClearDepthStencilValue)))
  (rangeCount :uint32)
  (pRanges (:pointer (:struct VkImageSubresourceRange))) ;; :LEN "rangeCount"
)

(cffi:defcfun ("vkCmdCopyBuffer" vkCmdCopyBuffer) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (srcBuffer VkBuffer)
  (dstBuffer VkBuffer)
  (regionCount :uint32)
  (pRegions (:pointer (:struct VkBufferCopy))) ;; :LEN "regionCount"
)

(cffi:defcfun ("vkCmdCopyBufferToImage" vkCmdCopyBufferToImage) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (srcBuffer VkBuffer)
  (dstImage VkImage)
  (dstImageLayout VkImageLayout)
  (regionCount :uint32)
  (pRegions (:pointer (:struct VkBufferImageCopy))) ;; :LEN "regionCount"
)

(cffi:defcfun ("vkCmdCopyImage" vkCmdCopyImage) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (srcImage VkImage)
  (srcImageLayout VkImageLayout)
  (dstImage VkImage)
  (dstImageLayout VkImageLayout)
  (regionCount :uint32)
  (pRegions (:pointer (:struct VkImageCopy))) ;; :LEN "regionCount"
)

(cffi:defcfun ("vkCmdCopyImageToBuffer" vkCmdCopyImageToBuffer) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (srcImage VkImage)
  (srcImageLayout VkImageLayout)
  (dstBuffer VkBuffer)
  (regionCount :uint32)
  (pRegions (:pointer (:struct VkBufferImageCopy))) ;; :LEN "regionCount"
)

(cffi:defcfun ("vkCmdCopyQueryPoolResults" vkCmdCopyQueryPoolResults) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (queryPool VkQueryPool)
  (firstQuery :uint32)
  (queryCount :uint32)
  (dstBuffer VkBuffer)
  (dstOffset VkDeviceSize)
  (stride VkDeviceSize)
  (flags VkQueryResultFlags) ;; :OPTIONAL "true"
)

(defvkdevextfun ("vkCmdDebugMarkerBeginEXT" vkCmdDebugMarkerBeginEXT) :void
  (commandBuffer VkCommandBuffer)
  (pMarkerInfo (:pointer (:struct VkDebugMarkerMarkerInfoEXT))))

(defvkdevextfun ("vkCmdDebugMarkerEndEXT" vkCmdDebugMarkerEndEXT) :void
  (commandBuffer VkCommandBuffer))

(defvkdevextfun ("vkCmdDebugMarkerInsertEXT" vkCmdDebugMarkerInsertEXT) :void
  (commandBuffer VkCommandBuffer)
  (pMarkerInfo (:pointer (:struct VkDebugMarkerMarkerInfoEXT))))

(cffi:defcfun ("vkCmdDispatch" vkCmdDispatch) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (groupCountX :uint32)
  (groupCountY :uint32)
  (groupCountZ :uint32))

(defvkdevextfun ("vkCmdDispatchBaseKHX" vkCmdDispatchBaseKHX) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (baseGroupX :uint32)
  (baseGroupY :uint32)
  (baseGroupZ :uint32)
  (groupCountX :uint32)
  (groupCountY :uint32)
  (groupCountZ :uint32))

(cffi:defcfun ("vkCmdDispatchIndirect" vkCmdDispatchIndirect) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (buffer VkBuffer)
  (offset VkDeviceSize))

(cffi:defcfun ("vkCmdDraw" vkCmdDraw) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (vertexCount :uint32)
  (instanceCount :uint32)
  (firstVertex :uint32)
  (firstInstance :uint32))

(cffi:defcfun ("vkCmdDrawIndexed" vkCmdDrawIndexed) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (indexCount :uint32)
  (instanceCount :uint32)
  (firstIndex :uint32)
  (vertexOffset :int32)
  (firstInstance :uint32))

(cffi:defcfun ("vkCmdDrawIndexedIndirect" vkCmdDrawIndexedIndirect) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (buffer VkBuffer)
  (offset VkDeviceSize)
  (drawCount :uint32)
  (stride :uint32))

(defvkdevextfun ("vkCmdDrawIndexedIndirectCountAMD" vkCmdDrawIndexedIndirectCountAMD) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (buffer VkBuffer)
  (offset VkDeviceSize)
  (countBuffer VkBuffer)
  (countBufferOffset VkDeviceSize)
  (maxDrawCount :uint32)
  (stride :uint32))

(cffi:defcfun ("vkCmdDrawIndirect" vkCmdDrawIndirect) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (buffer VkBuffer)
  (offset VkDeviceSize)
  (drawCount :uint32)
  (stride :uint32))

(defvkdevextfun ("vkCmdDrawIndirectCountAMD" vkCmdDrawIndirectCountAMD) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (buffer VkBuffer)
  (offset VkDeviceSize)
  (countBuffer VkBuffer)
  (countBufferOffset VkDeviceSize)
  (maxDrawCount :uint32)
  (stride :uint32))

(cffi:defcfun ("vkCmdEndQuery" vkCmdEndQuery) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (queryPool VkQueryPool)
  (query :uint32))

(cffi:defcfun ("vkCmdEndRenderPass" vkCmdEndRenderPass) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
)

(cffi:defcfun ("vkCmdExecuteCommands" vkCmdExecuteCommands) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (commandBufferCount :uint32)
  (pCommandBuffers (:pointer VkCommandBuffer)) ;; :LEN "commandBufferCount"
)

(cffi:defcfun ("vkCmdFillBuffer" vkCmdFillBuffer) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (dstBuffer VkBuffer)
  (dstOffset VkDeviceSize)
  (size VkDeviceSize)
  (data :uint32))

(cffi:defcfun ("vkCmdNextSubpass" vkCmdNextSubpass) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (contents VkSubpassContents))

(cffi:defcfun ("vkCmdPipelineBarrier" vkCmdPipelineBarrier) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (srcStageMask VkPipelineStageFlags)
  (dstStageMask VkPipelineStageFlags)
  (dependencyFlags VkDependencyFlags) ;; :OPTIONAL "true"
  (memoryBarrierCount :uint32) ;; :OPTIONAL "true"
  (pMemoryBarriers (:pointer (:struct VkMemoryBarrier))) ;; :LEN "memoryBarrierCount"
  (bufferMemoryBarrierCount :uint32) ;; :OPTIONAL "true"
  (pBufferMemoryBarriers (:pointer (:struct VkBufferMemoryBarrier))) ;; :LEN "bufferMemoryBarrierCount"
  (imageMemoryBarrierCount :uint32) ;; :OPTIONAL "true"
  (pImageMemoryBarriers (:pointer (:struct VkImageMemoryBarrier))) ;; :LEN "imageMemoryBarrierCount"
)

(defvkdevextfun ("vkCmdProcessCommandsNVX" vkCmdProcessCommandsNVX) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (pProcessCommandsInfo (:pointer (:struct VkCmdProcessCommandsInfoNVX))))

(cffi:defcfun ("vkCmdPushConstants" vkCmdPushConstants) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (layout VkPipelineLayout)
  (stageFlags VkShaderStageFlags)
  (offset :uint32)
  (size :uint32)
  (pValues (:pointer :void)) ;; :LEN "size"
)

(defvkdevextfun ("vkCmdPushDescriptorSetKHR" vkCmdPushDescriptorSetKHR) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (pipelineBindPoint VkPipelineBindPoint)
  (layout VkPipelineLayout)
  (set :uint32)
  (descriptorWriteCount :uint32)
  (pDescriptorWrites (:pointer (:struct VkWriteDescriptorSet))) ;; :LEN "descriptorWriteCount"
)

(defvkdevextfun ("vkCmdPushDescriptorSetWithTemplateKHR" vkCmdPushDescriptorSetWithTemplateKHR) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (descriptorUpdateTemplate VkDescriptorUpdateTemplateKHR)
  (layout VkPipelineLayout)
  (set :uint32)
  (pData (:pointer :void)))

(defvkdevextfun ("vkCmdReserveSpaceForCommandsNVX" vkCmdReserveSpaceForCommandsNVX) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (pReserveSpaceInfo (:pointer (:struct VkCmdReserveSpaceForCommandsInfoNVX))))

(cffi:defcfun ("vkCmdResetEvent" vkCmdResetEvent) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (event VkEvent)
  (stageMask VkPipelineStageFlags))

(cffi:defcfun ("vkCmdResetQueryPool" vkCmdResetQueryPool) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (queryPool VkQueryPool)
  (firstQuery :uint32)
  (queryCount :uint32))

(cffi:defcfun ("vkCmdResolveImage" vkCmdResolveImage) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (srcImage VkImage)
  (srcImageLayout VkImageLayout)
  (dstImage VkImage)
  (dstImageLayout VkImageLayout)
  (regionCount :uint32)
  (pRegions (:pointer (:struct VkImageResolve))) ;; :LEN "regionCount"
)

(cffi:defcfun ("vkCmdSetBlendConstants" vkCmdSetBlendConstants) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (blendConstants :float))

(cffi:defcfun ("vkCmdSetDepthBias" vkCmdSetDepthBias) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (depthBiasConstantFactor :float)
  (depthBiasClamp :float)
  (depthBiasSlopeFactor :float))

(cffi:defcfun ("vkCmdSetDepthBounds" vkCmdSetDepthBounds) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (minDepthBounds :float)
  (maxDepthBounds :float))

(defvkdevextfun ("vkCmdSetDeviceMaskKHX" vkCmdSetDeviceMaskKHX) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (deviceMask :uint32))

(defvkdevextfun ("vkCmdSetDiscardRectangleEXT" vkCmdSetDiscardRectangleEXT) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (firstDiscardRectangle :uint32)
  (discardRectangleCount :uint32)
  (pDiscardRectangles (:pointer (:struct VkRect2D))) ;; :LEN "discardRectangleCount"
)

(cffi:defcfun ("vkCmdSetEvent" vkCmdSetEvent) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (event VkEvent)
  (stageMask VkPipelineStageFlags))

(cffi:defcfun ("vkCmdSetLineWidth" vkCmdSetLineWidth) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (lineWidth :float))

(cffi:defcfun ("vkCmdSetScissor" vkCmdSetScissor) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (firstScissor :uint32)
  (scissorCount :uint32)
  (pScissors (:pointer (:struct VkRect2D))) ;; :LEN "scissorCount"
)

(cffi:defcfun ("vkCmdSetStencilCompareMask" vkCmdSetStencilCompareMask) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (faceMask VkStencilFaceFlags)
  (compareMask :uint32))

(cffi:defcfun ("vkCmdSetStencilReference" vkCmdSetStencilReference) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (faceMask VkStencilFaceFlags)
  (reference :uint32))

(cffi:defcfun ("vkCmdSetStencilWriteMask" vkCmdSetStencilWriteMask) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (faceMask VkStencilFaceFlags)
  (writeMask :uint32))

(cffi:defcfun ("vkCmdSetViewport" vkCmdSetViewport) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (firstViewport :uint32)
  (viewportCount :uint32)
  (pViewports (:pointer (:struct VkViewport))) ;; :LEN "viewportCount" :NOAUTOVALIDITY "true"
)

(defvkdevextfun ("vkCmdSetViewportWScalingNV" vkCmdSetViewportWScalingNV) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (firstViewport :uint32)
  (viewportCount :uint32)
  (pViewportWScalings (:pointer (:struct VkViewportWScalingNV))) ;; :LEN "viewportCount" :NOAUTOVALIDITY "true"
)

(cffi:defcfun ("vkCmdUpdateBuffer" vkCmdUpdateBuffer) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (dstBuffer VkBuffer)
  (dstOffset VkDeviceSize)
  (dataSize VkDeviceSize)
  (pData (:pointer :void)) ;; :LEN "dataSize"
)

(cffi:defcfun ("vkCmdWaitEvents" vkCmdWaitEvents) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (eventCount :uint32)
  (pEvents (:pointer VkEvent)) ;; :LEN "eventCount"
  (srcStageMask VkPipelineStageFlags)
  (dstStageMask VkPipelineStageFlags)
  (memoryBarrierCount :uint32) ;; :OPTIONAL "true"
  (pMemoryBarriers (:pointer (:struct VkMemoryBarrier))) ;; :LEN "memoryBarrierCount"
  (bufferMemoryBarrierCount :uint32) ;; :OPTIONAL "true"
  (pBufferMemoryBarriers (:pointer (:struct VkBufferMemoryBarrier))) ;; :LEN "bufferMemoryBarrierCount"
  (imageMemoryBarrierCount :uint32) ;; :OPTIONAL "true"
  (pImageMemoryBarriers (:pointer (:struct VkImageMemoryBarrier))) ;; :LEN "imageMemoryBarrierCount"
)

(cffi:defcfun ("vkCmdWriteTimestamp" vkCmdWriteTimestamp) :void
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (pipelineStage VkPipelineStageFlagBits)
  (queryPool VkQueryPool)
  (query :uint32))

(defvkinstextfun ("vkCreateAndroidSurfaceKHR" vkCreateAndroidSurfaceKHR) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkAndroidSurfaceCreateInfoKHR)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSurface (:pointer VkSurfaceKHR)))

(cffi:defcfun ("vkCreateBuffer" vkCreateBuffer) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkBufferCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pBuffer (:pointer VkBuffer)))

(cffi:defcfun ("vkCreateBufferView" vkCreateBufferView) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkBufferViewCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pView (:pointer VkBufferView)))

(cffi:defcfun ("vkCreateCommandPool" vkCreateCommandPool) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkCommandPoolCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pCommandPool (:pointer VkCommandPool)))

(cffi:defcfun ("vkCreateComputePipelines" vkCreateComputePipelines) VkResult
  (device VkDevice)
  (pipelineCache VkPipelineCache) ;; :OPTIONAL "true"
  (createInfoCount :uint32)
  (pCreateInfos (:pointer (:struct VkComputePipelineCreateInfo))) ;; :LEN "createInfoCount"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pPipelines (:pointer VkPipeline)) ;; :LEN "createInfoCount"
)

(defvkinstextfun ("vkCreateDebugReportCallbackEXT" vkCreateDebugReportCallbackEXT) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkDebugReportCallbackCreateInfoEXT)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pCallback (:pointer VkDebugReportCallbackEXT)))

(cffi:defcfun ("vkCreateDescriptorPool" vkCreateDescriptorPool) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkDescriptorPoolCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pDescriptorPool (:pointer VkDescriptorPool)))

(cffi:defcfun ("vkCreateDescriptorSetLayout" vkCreateDescriptorSetLayout) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkDescriptorSetLayoutCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSetLayout (:pointer VkDescriptorSetLayout)))

(defvkdevextfun ("vkCreateDescriptorUpdateTemplateKHR" vkCreateDescriptorUpdateTemplateKHR) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkDescriptorUpdateTemplateCreateInfoKHR)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pDescriptorUpdateTemplate (:pointer VkDescriptorUpdateTemplateKHR)))

(cffi:defcfun ("vkCreateDevice" vkCreateDevice) VkResult
  (physicalDevice VkPhysicalDevice)
  (pCreateInfo (:pointer (:struct VkDeviceCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pDevice (:pointer VkDevice)))

(cffi:defcfun ("vkCreateDisplayModeKHR" vkCreateDisplayModeKHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (display VkDisplayKHR) ;; :EXTERNSYNC "true"
  (pCreateInfo (:pointer (:struct VkDisplayModeCreateInfoKHR)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pMode (:pointer VkDisplayModeKHR)))

(cffi:defcfun ("vkCreateDisplayPlaneSurfaceKHR" vkCreateDisplayPlaneSurfaceKHR) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkDisplaySurfaceCreateInfoKHR)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSurface (:pointer VkSurfaceKHR)))

(cffi:defcfun ("vkCreateEvent" vkCreateEvent) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkEventCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pEvent (:pointer VkEvent)))

(cffi:defcfun ("vkCreateFence" vkCreateFence) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkFenceCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pFence (:pointer VkFence)))

(cffi:defcfun ("vkCreateFramebuffer" vkCreateFramebuffer) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkFramebufferCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pFramebuffer (:pointer VkFramebuffer)))

(cffi:defcfun ("vkCreateGraphicsPipelines" vkCreateGraphicsPipelines) VkResult
  (device VkDevice)
  (pipelineCache VkPipelineCache) ;; :OPTIONAL "true"
  (createInfoCount :uint32)
  (pCreateInfos (:pointer (:struct VkGraphicsPipelineCreateInfo))) ;; :LEN "createInfoCount"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pPipelines (:pointer VkPipeline)) ;; :LEN "createInfoCount"
)

(defvkinstextfun ("vkCreateIOSSurfaceMVK" vkCreateIOSSurfaceMVK) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkIOSSurfaceCreateInfoMVK)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSurface (:pointer VkSurfaceKHR)))

(cffi:defcfun ("vkCreateImage" vkCreateImage) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkImageCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pImage (:pointer VkImage)))

(cffi:defcfun ("vkCreateImageView" vkCreateImageView) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkImageViewCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pView (:pointer VkImageView)))

(defvkdevextfun ("vkCreateIndirectCommandsLayoutNVX" vkCreateIndirectCommandsLayoutNVX) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkIndirectCommandsLayoutCreateInfoNVX)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pIndirectCommandsLayout (:pointer VkIndirectCommandsLayoutNVX)))

(cffi:defcfun ("vkCreateInstance" vkCreateInstance) VkResult
  (pCreateInfo (:pointer (:struct VkInstanceCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pInstance (:pointer VkInstance)))

(defvkinstextfun ("vkCreateMacOSSurfaceMVK" vkCreateMacOSSurfaceMVK) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkMacOSSurfaceCreateInfoMVK)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSurface (:pointer VkSurfaceKHR)))

(defvkinstextfun ("vkCreateMirSurfaceKHR" vkCreateMirSurfaceKHR) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkMirSurfaceCreateInfoKHR)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSurface (:pointer VkSurfaceKHR)))

(defvkdevextfun ("vkCreateObjectTableNVX" vkCreateObjectTableNVX) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkObjectTableCreateInfoNVX)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pObjectTable (:pointer VkObjectTableNVX)))

(cffi:defcfun ("vkCreatePipelineCache" vkCreatePipelineCache) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkPipelineCacheCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pPipelineCache (:pointer VkPipelineCache)))

(cffi:defcfun ("vkCreatePipelineLayout" vkCreatePipelineLayout) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkPipelineLayoutCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pPipelineLayout (:pointer VkPipelineLayout)))

(cffi:defcfun ("vkCreateQueryPool" vkCreateQueryPool) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkQueryPoolCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pQueryPool (:pointer VkQueryPool)))

(cffi:defcfun ("vkCreateRenderPass" vkCreateRenderPass) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkRenderPassCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pRenderPass (:pointer VkRenderPass)))

(cffi:defcfun ("vkCreateSampler" vkCreateSampler) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkSamplerCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSampler (:pointer VkSampler)))

(cffi:defcfun ("vkCreateSemaphore" vkCreateSemaphore) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkSemaphoreCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSemaphore (:pointer VkSemaphore)))

(cffi:defcfun ("vkCreateShaderModule" vkCreateShaderModule) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkShaderModuleCreateInfo)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pShaderModule (:pointer VkShaderModule)))

(cffi:defcfun ("vkCreateSharedSwapchainsKHR" vkCreateSharedSwapchainsKHR) VkResult
  (device VkDevice)
  (swapchainCount :uint32)
  (pCreateInfos (:pointer (:struct VkSwapchainCreateInfoKHR))) ;; :LEN "swapchainCount" :EXTERNSYNC "pCreateInfos[].surface,pCreateInfos[].oldSwapchain"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSwapchains (:pointer VkSwapchainKHR)) ;; :LEN "swapchainCount"
)

(cffi:defcfun ("vkCreateSwapchainKHR" vkCreateSwapchainKHR) VkResult
  (device VkDevice)
  (pCreateInfo (:pointer (:struct VkSwapchainCreateInfoKHR))) ;; :EXTERNSYNC "pCreateInfo.surface,pCreateInfo.oldSwapchain"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSwapchain (:pointer VkSwapchainKHR)))

(defvkinstextfun ("vkCreateViSurfaceNN" vkCreateViSurfaceNN) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkViSurfaceCreateInfoNN)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSurface (:pointer VkSurfaceKHR)))

(defvkinstextfun ("vkCreateWaylandSurfaceKHR" vkCreateWaylandSurfaceKHR) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkWaylandSurfaceCreateInfoKHR)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSurface (:pointer VkSurfaceKHR)))

(cffi:defcfun ("vkCreateWin32SurfaceKHR" vkCreateWin32SurfaceKHR) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkWin32SurfaceCreateInfoKHR)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSurface (:pointer VkSurfaceKHR)))

(defvkinstextfun ("vkCreateXcbSurfaceKHR" vkCreateXcbSurfaceKHR) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkXcbSurfaceCreateInfoKHR)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSurface (:pointer VkSurfaceKHR)))

(defvkinstextfun ("vkCreateXlibSurfaceKHR" vkCreateXlibSurfaceKHR) VkResult
  (instance VkInstance)
  (pCreateInfo (:pointer (:struct VkXlibSurfaceCreateInfoKHR)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
  (pSurface (:pointer VkSurfaceKHR)))

(defvkdevextfun ("vkDebugMarkerSetObjectNameEXT" vkDebugMarkerSetObjectNameEXT) VkResult
  (device VkDevice)
  (pNameInfo (:pointer (:struct VkDebugMarkerObjectNameInfoEXT))) ;; :EXTERNSYNC "pNameInfo.object"
)

(defvkdevextfun ("vkDebugMarkerSetObjectTagEXT" vkDebugMarkerSetObjectTagEXT) VkResult
  (device VkDevice)
  (pTagInfo (:pointer (:struct VkDebugMarkerObjectTagInfoEXT))) ;; :EXTERNSYNC "pTagInfo.object"
)

(defvkinstextfun ("vkDebugReportMessageEXT" vkDebugReportMessageEXT) :void
  (instance VkInstance)
  (flags VkDebugReportFlagsEXT)
  (objectType VkDebugReportObjectTypeEXT)
  (object :uint64)
  (location size-t)
  (messageCode :int32)
  (pLayerPrefix (:pointer :char)) ;; :LEN "null-terminated"
  (pMessage (:pointer :char)) ;; :LEN "null-terminated"
)

(cffi:defcfun ("vkDestroyBuffer" vkDestroyBuffer) :void
  (device VkDevice)
  (buffer VkBuffer) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyBufferView" vkDestroyBufferView) :void
  (device VkDevice)
  (bufferView VkBufferView) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyCommandPool" vkDestroyCommandPool) :void
  (device VkDevice)
  (commandPool VkCommandPool) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(defvkinstextfun ("vkDestroyDebugReportCallbackEXT" vkDestroyDebugReportCallbackEXT) :void
  (instance VkInstance)
  (callback VkDebugReportCallbackEXT) ;; :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyDescriptorPool" vkDestroyDescriptorPool) :void
  (device VkDevice)
  (descriptorPool VkDescriptorPool) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyDescriptorSetLayout" vkDestroyDescriptorSetLayout) :void
  (device VkDevice)
  (descriptorSetLayout VkDescriptorSetLayout) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(defvkdevextfun ("vkDestroyDescriptorUpdateTemplateKHR" vkDestroyDescriptorUpdateTemplateKHR) :void
  (device VkDevice)
  (descriptorUpdateTemplate VkDescriptorUpdateTemplateKHR) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyDevice" vkDestroyDevice) :void
  (device VkDevice) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyEvent" vkDestroyEvent) :void
  (device VkDevice)
  (event VkEvent) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyFence" vkDestroyFence) :void
  (device VkDevice)
  (fence VkFence) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyFramebuffer" vkDestroyFramebuffer) :void
  (device VkDevice)
  (framebuffer VkFramebuffer) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyImage" vkDestroyImage) :void
  (device VkDevice)
  (image VkImage) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyImageView" vkDestroyImageView) :void
  (device VkDevice)
  (imageView VkImageView) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(defvkdevextfun ("vkDestroyIndirectCommandsLayoutNVX" vkDestroyIndirectCommandsLayoutNVX) :void
  (device VkDevice)
  (indirectCommandsLayout VkIndirectCommandsLayoutNVX)
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyInstance" vkDestroyInstance) :void
  (instance VkInstance) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(defvkdevextfun ("vkDestroyObjectTableNVX" vkDestroyObjectTableNVX) :void
  (device VkDevice)
  (objectTable VkObjectTableNVX) ;; :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyPipeline" vkDestroyPipeline) :void
  (device VkDevice)
  (pipeline VkPipeline) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyPipelineCache" vkDestroyPipelineCache) :void
  (device VkDevice)
  (pipelineCache VkPipelineCache) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyPipelineLayout" vkDestroyPipelineLayout) :void
  (device VkDevice)
  (pipelineLayout VkPipelineLayout) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyQueryPool" vkDestroyQueryPool) :void
  (device VkDevice)
  (queryPool VkQueryPool) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyRenderPass" vkDestroyRenderPass) :void
  (device VkDevice)
  (renderPass VkRenderPass) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroySampler" vkDestroySampler) :void
  (device VkDevice)
  (sampler VkSampler) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroySemaphore" vkDestroySemaphore) :void
  (device VkDevice)
  (semaphore VkSemaphore) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroyShaderModule" vkDestroyShaderModule) :void
  (device VkDevice)
  (shaderModule VkShaderModule) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroySurfaceKHR" vkDestroySurfaceKHR) :void
  (instance VkInstance)
  (surface VkSurfaceKHR) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDestroySwapchainKHR" vkDestroySwapchainKHR) :void
  (device VkDevice)
  (swapchain VkSwapchainKHR) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkDeviceWaitIdle" vkDeviceWaitIdle) VkResult
  (device VkDevice))

(defvkdevextfun ("vkDisplayPowerControlEXT" vkDisplayPowerControlEXT) VkResult
  (device VkDevice)
  (display VkDisplayKHR)
  (pDisplayPowerInfo (:pointer (:struct VkDisplayPowerInfoEXT))))

(cffi:defcfun ("vkEndCommandBuffer" vkEndCommandBuffer) VkResult
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
)

(cffi:defcfun ("vkEnumerateDeviceExtensionProperties" vkEnumerateDeviceExtensionProperties) VkResult
  (physicalDevice VkPhysicalDevice)
  (pLayerName (:pointer :char)) ;; :OPTIONAL "true" :LEN "null-terminated"
  (pPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pProperties (:pointer (:struct VkExtensionProperties))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(cffi:defcfun ("vkEnumerateDeviceLayerProperties" vkEnumerateDeviceLayerProperties) VkResult
  (physicalDevice VkPhysicalDevice)
  (pPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pProperties (:pointer (:struct VkLayerProperties))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(cffi:defcfun ("vkEnumerateInstanceExtensionProperties" vkEnumerateInstanceExtensionProperties) VkResult
  (pLayerName (:pointer :char)) ;; :OPTIONAL "true" :LEN "null-terminated"
  (pPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pProperties (:pointer (:struct VkExtensionProperties))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(cffi:defcfun ("vkEnumerateInstanceLayerProperties" vkEnumerateInstanceLayerProperties) VkResult
  (pPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pProperties (:pointer (:struct VkLayerProperties))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkinstextfun ("vkEnumeratePhysicalDeviceGroupsKHX" vkEnumeratePhysicalDeviceGroupsKHX) VkResult
  (instance VkInstance)
  (pPhysicalDeviceGroupCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pPhysicalDeviceGroupProperties (:pointer (:struct VkPhysicalDeviceGroupPropertiesKHX))) ;; :OPTIONAL "true" :LEN "pPhysicalDeviceGroupCount"
)

(cffi:defcfun ("vkEnumeratePhysicalDevices" vkEnumeratePhysicalDevices) VkResult
  (instance VkInstance)
  (pPhysicalDeviceCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pPhysicalDevices (:pointer VkPhysicalDevice)) ;; :OPTIONAL "true" :LEN "pPhysicalDeviceCount"
)

(cffi:defcfun ("vkFlushMappedMemoryRanges" vkFlushMappedMemoryRanges) VkResult
  (device VkDevice)
  (memoryRangeCount :uint32)
  (pMemoryRanges (:pointer (:struct VkMappedMemoryRange))) ;; :LEN "memoryRangeCount"
)

(cffi:defcfun ("vkFreeCommandBuffers" vkFreeCommandBuffers) :void
  (device VkDevice)
  (commandPool VkCommandPool) ;; :EXTERNSYNC "true"
  (commandBufferCount :uint32)
  (pCommandBuffers (:pointer VkCommandBuffer)) ;; :LEN "commandBufferCount" :NOAUTOVALIDITY "true" :EXTERNSYNC "true"
)

(cffi:defcfun ("vkFreeDescriptorSets" vkFreeDescriptorSets) VkResult
  (device VkDevice)
  (descriptorPool VkDescriptorPool) ;; :EXTERNSYNC "true"
  (descriptorSetCount :uint32)
  (pDescriptorSets (:pointer VkDescriptorSet)) ;; :LEN "descriptorSetCount" :NOAUTOVALIDITY "true" :EXTERNSYNC "true"
)

(cffi:defcfun ("vkFreeMemory" vkFreeMemory) :void
  (device VkDevice)
  (memory VkDeviceMemory) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (pAllocator (:pointer (:struct VkAllocationCallbacks))) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkGetBufferMemoryRequirements" vkGetBufferMemoryRequirements) :void
  (device VkDevice)
  (buffer VkBuffer)
  (pMemoryRequirements (:pointer (:struct VkMemoryRequirements))))

(defvkdevextfun ("vkGetDeviceGroupPeerMemoryFeaturesKHX" vkGetDeviceGroupPeerMemoryFeaturesKHX) :void
  (device VkDevice)
  (heapIndex :uint32)
  (localDeviceIndex :uint32)
  (remoteDeviceIndex :uint32)
  (pPeerMemoryFeatures (:pointer VkPeerMemoryFeatureFlagsKHX)))

(defvkdevextfun ("vkGetDeviceGroupPresentCapabilitiesKHX" vkGetDeviceGroupPresentCapabilitiesKHX) VkResult
  (device VkDevice)
  (pDeviceGroupPresentCapabilities (:pointer (:struct VkDeviceGroupPresentCapabilitiesKHX))))

(defvkdevextfun ("vkGetDeviceGroupSurfacePresentModesKHX" vkGetDeviceGroupSurfacePresentModesKHX) VkResult
  (device VkDevice)
  (surface VkSurfaceKHR) ;; :EXTERNSYNC "true"
  (pModes (:pointer VkDeviceGroupPresentModeFlagsKHX)))

(cffi:defcfun ("vkGetDeviceMemoryCommitment" vkGetDeviceMemoryCommitment) :void
  (device VkDevice)
  (memory VkDeviceMemory)
  (pCommittedMemoryInBytes (:pointer VkDeviceSize)))

(cffi:defcfun ("vkGetDeviceProcAddr" vkGetDeviceProcAddr) PFN_vkVoidFunction
  (device VkDevice)
  (pName (:pointer :char)) ;; :LEN "null-terminated"
)

(cffi:defcfun ("vkGetDeviceQueue" vkGetDeviceQueue) :void
  (device VkDevice)
  (queueFamilyIndex :uint32)
  (queueIndex :uint32)
  (pQueue (:pointer VkQueue)))

(cffi:defcfun ("vkGetDisplayModePropertiesKHR" vkGetDisplayModePropertiesKHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (display VkDisplayKHR)
  (pPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pProperties (:pointer (:struct VkDisplayModePropertiesKHR))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(cffi:defcfun ("vkGetDisplayPlaneCapabilitiesKHR" vkGetDisplayPlaneCapabilitiesKHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (mode VkDisplayModeKHR) ;; :EXTERNSYNC "true"
  (planeIndex :uint32)
  (pCapabilities (:pointer (:struct VkDisplayPlaneCapabilitiesKHR))))

(cffi:defcfun ("vkGetDisplayPlaneSupportedDisplaysKHR" vkGetDisplayPlaneSupportedDisplaysKHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (planeIndex :uint32)
  (pDisplayCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pDisplays (:pointer VkDisplayKHR)) ;; :OPTIONAL "true" :LEN "pDisplayCount"
)

(cffi:defcfun ("vkGetEventStatus" vkGetEventStatus) VkResult
  (device VkDevice)
  (event VkEvent))

(cffi:defcfun ("vkGetFenceStatus" vkGetFenceStatus) VkResult
  (device VkDevice)
  (fence VkFence))

(cffi:defcfun ("vkGetImageMemoryRequirements" vkGetImageMemoryRequirements) :void
  (device VkDevice)
  (image VkImage)
  (pMemoryRequirements (:pointer (:struct VkMemoryRequirements))))

(cffi:defcfun ("vkGetImageSparseMemoryRequirements" vkGetImageSparseMemoryRequirements) :void
  (device VkDevice)
  (image VkImage)
  (pSparseMemoryRequirementCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pSparseMemoryRequirements (:pointer (:struct VkSparseImageMemoryRequirements))) ;; :OPTIONAL "true" :LEN "pSparseMemoryRequirementCount"
)

(cffi:defcfun ("vkGetImageSubresourceLayout" vkGetImageSubresourceLayout) :void
  (device VkDevice)
  (image VkImage)
  (pSubresource (:pointer (:struct VkImageSubresource)))
  (pLayout (:pointer (:struct VkSubresourceLayout))))

(cffi:defcfun ("vkGetInstanceProcAddr" vkGetInstanceProcAddr) PFN_vkVoidFunction
  (instance VkInstance) ;; :OPTIONAL "true"
  (pName (:pointer :char)) ;; :LEN "null-terminated"
)

(defvkdevextfun ("vkGetMemoryFdKHX" vkGetMemoryFdKHX) VkResult
  (device VkDevice)
  (memory VkDeviceMemory)
  (handleType VkExternalMemoryHandleTypeFlagBitsKHX)
  (pFd (:pointer :int)))

(defvkdevextfun ("vkGetMemoryFdPropertiesKHX" vkGetMemoryFdPropertiesKHX) VkResult
  (device VkDevice)
  (handleType VkExternalMemoryHandleTypeFlagBitsKHX)
  (fd :int)
  (pMemoryFdProperties (:pointer (:struct VkMemoryFdPropertiesKHX))))

(defvkdevextfun ("vkGetMemoryWin32HandleKHX" vkGetMemoryWin32HandleKHX) VkResult
  (device VkDevice)
  (memory VkDeviceMemory)
  (handleType VkExternalMemoryHandleTypeFlagBitsKHX)
  (pHandle (:pointer HANDLE)))

(defvkdevextfun ("vkGetMemoryWin32HandleNV" vkGetMemoryWin32HandleNV) VkResult
  (device VkDevice)
  (memory VkDeviceMemory)
  (handleType VkExternalMemoryHandleTypeFlagsNV)
  (pHandle (:pointer HANDLE)))

(defvkdevextfun ("vkGetMemoryWin32HandlePropertiesKHX" vkGetMemoryWin32HandlePropertiesKHX) VkResult
  (device VkDevice)
  (handleType VkExternalMemoryHandleTypeFlagBitsKHX)
  (handle HANDLE)
  (pMemoryWin32HandleProperties (:pointer (:struct VkMemoryWin32HandlePropertiesKHX))))

(defvkdevextfun ("vkGetPastPresentationTimingGOOGLE" vkGetPastPresentationTimingGOOGLE) VkResult
  (device VkDevice)
  (swapchain VkSwapchainKHR) ;; :EXTERNSYNC "true"
  (pPresentationTimingCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pPresentationTimings (:pointer (:struct VkPastPresentationTimingGOOGLE))) ;; :OPTIONAL "true" :LEN "pPresentationTimingCount"
)

(cffi:defcfun ("vkGetPhysicalDeviceDisplayPlanePropertiesKHR" vkGetPhysicalDeviceDisplayPlanePropertiesKHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (pPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pProperties (:pointer (:struct VkDisplayPlanePropertiesKHR))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(cffi:defcfun ("vkGetPhysicalDeviceDisplayPropertiesKHR" vkGetPhysicalDeviceDisplayPropertiesKHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (pPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pProperties (:pointer (:struct VkDisplayPropertiesKHR))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkinstextfun ("vkGetPhysicalDeviceExternalBufferPropertiesKHX" vkGetPhysicalDeviceExternalBufferPropertiesKHX) :void
  (physicalDevice VkPhysicalDevice)
  (pExternalBufferInfo (:pointer (:struct VkPhysicalDeviceExternalBufferInfoKHX)))
  (pExternalBufferProperties (:pointer (:struct VkExternalBufferPropertiesKHX))))

(defvkinstextfun ("vkGetPhysicalDeviceExternalImageFormatPropertiesNV" vkGetPhysicalDeviceExternalImageFormatPropertiesNV) VkResult
  (physicalDevice VkPhysicalDevice)
  (format VkFormat)
  (type VkImageType)
  (tiling VkImageTiling)
  (usage VkImageUsageFlags)
  (flags VkImageCreateFlags) ;; :OPTIONAL "true"
  (externalHandleType VkExternalMemoryHandleTypeFlagsNV) ;; :OPTIONAL "true"
  (pExternalImageFormatProperties (:pointer (:struct VkExternalImageFormatPropertiesNV))))

(defvkinstextfun ("vkGetPhysicalDeviceExternalSemaphorePropertiesKHX" vkGetPhysicalDeviceExternalSemaphorePropertiesKHX) :void
  (physicalDevice VkPhysicalDevice)
  (pExternalSemaphoreInfo (:pointer (:struct VkPhysicalDeviceExternalSemaphoreInfoKHX)))
  (pExternalSemaphoreProperties (:pointer (:struct VkExternalSemaphorePropertiesKHX))))

(cffi:defcfun ("vkGetPhysicalDeviceFeatures" vkGetPhysicalDeviceFeatures) :void
  (physicalDevice VkPhysicalDevice)
  (pFeatures (:pointer (:struct VkPhysicalDeviceFeatures))))

(defvkinstextfun ("vkGetPhysicalDeviceFeatures2KHR" vkGetPhysicalDeviceFeatures2KHR) :void
  (physicalDevice VkPhysicalDevice)
  (pFeatures (:pointer (:struct VkPhysicalDeviceFeatures2KHR))))

(cffi:defcfun ("vkGetPhysicalDeviceFormatProperties" vkGetPhysicalDeviceFormatProperties) :void
  (physicalDevice VkPhysicalDevice)
  (format VkFormat)
  (pFormatProperties (:pointer (:struct VkFormatProperties))))

(defvkinstextfun ("vkGetPhysicalDeviceFormatProperties2KHR" vkGetPhysicalDeviceFormatProperties2KHR) :void
  (physicalDevice VkPhysicalDevice)
  (format VkFormat)
  (pFormatProperties (:pointer (:struct VkFormatProperties2KHR))))

(defvkdevextfun ("vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX" vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX) :void
  (physicalDevice VkPhysicalDevice)
  (pFeatures (:pointer (:struct VkDeviceGeneratedCommandsFeaturesNVX)))
  (pLimits (:pointer (:struct VkDeviceGeneratedCommandsLimitsNVX))))

(cffi:defcfun ("vkGetPhysicalDeviceImageFormatProperties" vkGetPhysicalDeviceImageFormatProperties) VkResult
  (physicalDevice VkPhysicalDevice)
  (format VkFormat)
  (type VkImageType)
  (tiling VkImageTiling)
  (usage VkImageUsageFlags)
  (flags VkImageCreateFlags) ;; :OPTIONAL "true"
  (pImageFormatProperties (:pointer (:struct VkImageFormatProperties))))

(defvkinstextfun ("vkGetPhysicalDeviceImageFormatProperties2KHR" vkGetPhysicalDeviceImageFormatProperties2KHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (pImageFormatInfo (:pointer (:struct VkPhysicalDeviceImageFormatInfo2KHR)))
  (pImageFormatProperties (:pointer (:struct VkImageFormatProperties2KHR))))

(cffi:defcfun ("vkGetPhysicalDeviceMemoryProperties" vkGetPhysicalDeviceMemoryProperties) :void
  (physicalDevice VkPhysicalDevice)
  (pMemoryProperties (:pointer (:struct VkPhysicalDeviceMemoryProperties))))

(defvkinstextfun ("vkGetPhysicalDeviceMemoryProperties2KHR" vkGetPhysicalDeviceMemoryProperties2KHR) :void
  (physicalDevice VkPhysicalDevice)
  (pMemoryProperties (:pointer (:struct VkPhysicalDeviceMemoryProperties2KHR))))

(defvkinstextfun ("vkGetPhysicalDeviceMirPresentationSupportKHR" vkGetPhysicalDeviceMirPresentationSupportKHR) VkBool32
  (physicalDevice VkPhysicalDevice)
  (queueFamilyIndex :uint32)
  (connection (:pointer MirConnection)))

(defvkdevextfun ("vkGetPhysicalDevicePresentRectanglesKHX" vkGetPhysicalDevicePresentRectanglesKHX) VkResult
  (physicalDevice VkPhysicalDevice)
  (surface VkSurfaceKHR) ;; :EXTERNSYNC "true"
  (pRectCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pRects (:pointer (:struct VkRect2D))) ;; :OPTIONAL "true" :LEN "pRectCount"
)

(cffi:defcfun ("vkGetPhysicalDeviceProperties" vkGetPhysicalDeviceProperties) :void
  (physicalDevice VkPhysicalDevice)
  (pProperties (:pointer (:struct VkPhysicalDeviceProperties))))

(defvkinstextfun ("vkGetPhysicalDeviceProperties2KHR" vkGetPhysicalDeviceProperties2KHR) :void
  (physicalDevice VkPhysicalDevice)
  (pProperties (:pointer (:struct VkPhysicalDeviceProperties2KHR))))

(cffi:defcfun ("vkGetPhysicalDeviceQueueFamilyProperties" vkGetPhysicalDeviceQueueFamilyProperties) :void
  (physicalDevice VkPhysicalDevice)
  (pQueueFamilyPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pQueueFamilyProperties (:pointer (:struct VkQueueFamilyProperties))) ;; :OPTIONAL "true" :LEN "pQueueFamilyPropertyCount"
)

(defvkinstextfun ("vkGetPhysicalDeviceQueueFamilyProperties2KHR" vkGetPhysicalDeviceQueueFamilyProperties2KHR) :void
  (physicalDevice VkPhysicalDevice)
  (pQueueFamilyPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pQueueFamilyProperties (:pointer (:struct VkQueueFamilyProperties2KHR))) ;; :OPTIONAL "true" :LEN "pQueueFamilyPropertyCount"
)

(cffi:defcfun ("vkGetPhysicalDeviceSparseImageFormatProperties" vkGetPhysicalDeviceSparseImageFormatProperties) :void
  (physicalDevice VkPhysicalDevice)
  (format VkFormat)
  (type VkImageType)
  (samples VkSampleCountFlagBits)
  (usage VkImageUsageFlags)
  (tiling VkImageTiling)
  (pPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pProperties (:pointer (:struct VkSparseImageFormatProperties))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkinstextfun ("vkGetPhysicalDeviceSparseImageFormatProperties2KHR" vkGetPhysicalDeviceSparseImageFormatProperties2KHR) :void
  (physicalDevice VkPhysicalDevice)
  (pFormatInfo (:pointer (:struct VkPhysicalDeviceSparseImageFormatInfo2KHR)))
  (pPropertyCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pProperties (:pointer (:struct VkSparseImageFormatProperties2KHR))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkinstextfun ("vkGetPhysicalDeviceSurfaceCapabilities2EXT" vkGetPhysicalDeviceSurfaceCapabilities2EXT) VkResult
  (physicalDevice VkPhysicalDevice)
  (surface VkSurfaceKHR)
  (pSurfaceCapabilities (:pointer (:struct VkSurfaceCapabilities2EXT))))

(defvkinstextfun ("vkGetPhysicalDeviceSurfaceCapabilities2KHR" vkGetPhysicalDeviceSurfaceCapabilities2KHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (pSurfaceInfo (:pointer (:struct VkPhysicalDeviceSurfaceInfo2KHR)))
  (pSurfaceCapabilities (:pointer (:struct VkSurfaceCapabilities2KHR))))

(cffi:defcfun ("vkGetPhysicalDeviceSurfaceCapabilitiesKHR" vkGetPhysicalDeviceSurfaceCapabilitiesKHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (surface VkSurfaceKHR)
  (pSurfaceCapabilities (:pointer (:struct VkSurfaceCapabilitiesKHR))))

(defvkinstextfun ("vkGetPhysicalDeviceSurfaceFormats2KHR" vkGetPhysicalDeviceSurfaceFormats2KHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (pSurfaceInfo (:pointer (:struct VkPhysicalDeviceSurfaceInfo2KHR)))
  (pSurfaceFormatCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pSurfaceFormats (:pointer (:struct VkSurfaceFormat2KHR))) ;; :OPTIONAL "true" :LEN "pSurfaceFormatCount"
)

(cffi:defcfun ("vkGetPhysicalDeviceSurfaceFormatsKHR" vkGetPhysicalDeviceSurfaceFormatsKHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (surface VkSurfaceKHR)
  (pSurfaceFormatCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pSurfaceFormats (:pointer (:struct VkSurfaceFormatKHR))) ;; :OPTIONAL "true" :LEN "pSurfaceFormatCount"
)

(cffi:defcfun ("vkGetPhysicalDeviceSurfacePresentModesKHR" vkGetPhysicalDeviceSurfacePresentModesKHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (surface VkSurfaceKHR)
  (pPresentModeCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pPresentModes (:pointer VkPresentModeKHR)) ;; :OPTIONAL "true" :LEN "pPresentModeCount"
)

(cffi:defcfun ("vkGetPhysicalDeviceSurfaceSupportKHR" vkGetPhysicalDeviceSurfaceSupportKHR) VkResult
  (physicalDevice VkPhysicalDevice)
  (queueFamilyIndex :uint32)
  (surface VkSurfaceKHR)
  (pSupported (:pointer VkBool32)))

(defvkinstextfun ("vkGetPhysicalDeviceWaylandPresentationSupportKHR" vkGetPhysicalDeviceWaylandPresentationSupportKHR) VkBool32
  (physicalDevice VkPhysicalDevice)
  (queueFamilyIndex :uint32)
  (display (:pointer (:struct wl_display))))

(cffi:defcfun ("vkGetPhysicalDeviceWin32PresentationSupportKHR" vkGetPhysicalDeviceWin32PresentationSupportKHR) VkBool32
  (physicalDevice VkPhysicalDevice)
  (queueFamilyIndex :uint32))

(defvkinstextfun ("vkGetPhysicalDeviceXlibPresentationSupportKHR" vkGetPhysicalDeviceXlibPresentationSupportKHR) VkBool32
  (physicalDevice VkPhysicalDevice)
  (queueFamilyIndex :uint32)
  (dpy (:pointer Display))
  (visualID VisualID))

(cffi:defcfun ("vkGetPipelineCacheData" vkGetPipelineCacheData) VkResult
  (device VkDevice)
  (pipelineCache VkPipelineCache)
  (pDataSize (:pointer size-t)) ;; :OPTIONAL "false,true"
  (pData (:pointer :void)) ;; :OPTIONAL "true" :LEN "pDataSize"
)

(cffi:defcfun ("vkGetQueryPoolResults" vkGetQueryPoolResults) VkResult
  (device VkDevice)
  (queryPool VkQueryPool)
  (firstQuery :uint32)
  (queryCount :uint32)
  (dataSize size-t)
  (pData (:pointer :void)) ;; :LEN "dataSize"
  (stride VkDeviceSize)
  (flags VkQueryResultFlags) ;; :OPTIONAL "true"
)

(defvkinstextfun ("vkGetRandROutputDisplayEXT" vkGetRandROutputDisplayEXT) VkResult
  (physicalDevice VkPhysicalDevice)
  (dpy (:pointer Display))
  (rrOutput RROutput)
  (pDisplay (:pointer VkDisplayKHR)))

(defvkdevextfun ("vkGetRefreshCycleDurationGOOGLE" vkGetRefreshCycleDurationGOOGLE) VkResult
  (device VkDevice)
  (swapchain VkSwapchainKHR) ;; :EXTERNSYNC "true"
  (pDisplayTimingProperties (:pointer (:struct VkRefreshCycleDurationGOOGLE))))

(cffi:defcfun ("vkGetRenderAreaGranularity" vkGetRenderAreaGranularity) :void
  (device VkDevice)
  (renderPass VkRenderPass)
  (pGranularity (:pointer (:struct VkExtent2D))))

(defvkdevextfun ("vkGetSemaphoreFdKHX" vkGetSemaphoreFdKHX) VkResult
  (device VkDevice)
  (semaphore VkSemaphore)
  (handleType VkExternalSemaphoreHandleTypeFlagBitsKHX)
  (pFd (:pointer :int)))

(defvkdevextfun ("vkGetSemaphoreWin32HandleKHX" vkGetSemaphoreWin32HandleKHX) VkResult
  (device VkDevice)
  (semaphore VkSemaphore)
  (handleType VkExternalSemaphoreHandleTypeFlagBitsKHX)
  (pHandle (:pointer HANDLE)))

(defvkdevextfun ("vkGetSwapchainCounterEXT" vkGetSwapchainCounterEXT) VkResult
  (device VkDevice)
  (swapchain VkSwapchainKHR)
  (counter VkSurfaceCounterFlagBitsEXT)
  (pCounterValue (:pointer :uint64)))

(cffi:defcfun ("vkGetSwapchainImagesKHR" vkGetSwapchainImagesKHR) VkResult
  (device VkDevice)
  (swapchain VkSwapchainKHR)
  (pSwapchainImageCount (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (pSwapchainImages (:pointer VkImage)) ;; :OPTIONAL "true" :LEN "pSwapchainImageCount"
)

(defvkdevextfun ("vkGetSwapchainStatusKHR" vkGetSwapchainStatusKHR) VkResult
  (device VkDevice)
  (swapchain VkSwapchainKHR) ;; :EXTERNSYNC "true"
)

(defvkdevextfun ("vkImportSemaphoreFdKHX" vkImportSemaphoreFdKHX) VkResult
  (device VkDevice)
  (pImportSemaphoreFdInfo (:pointer (:struct VkImportSemaphoreFdInfoKHX))))

(defvkdevextfun ("vkImportSemaphoreWin32HandleKHX" vkImportSemaphoreWin32HandleKHX) VkResult
  (device VkDevice)
  (pImportSemaphoreWin32HandleInfo (:pointer (:struct VkImportSemaphoreWin32HandleInfoKHX))))

(cffi:defcfun ("vkInvalidateMappedMemoryRanges" vkInvalidateMappedMemoryRanges) VkResult
  (device VkDevice)
  (memoryRangeCount :uint32)
  (pMemoryRanges (:pointer (:struct VkMappedMemoryRange))) ;; :LEN "memoryRangeCount"
)

(cffi:defcfun ("vkMapMemory" vkMapMemory) VkResult
  (device VkDevice)
  (memory VkDeviceMemory) ;; :EXTERNSYNC "true"
  (offset VkDeviceSize)
  (size VkDeviceSize)
  (flags VkMemoryMapFlags) ;; :OPTIONAL "true"
  (ppData (:pointer (:pointer :void))))

(cffi:defcfun ("vkMergePipelineCaches" vkMergePipelineCaches) VkResult
  (device VkDevice)
  (dstCache VkPipelineCache) ;; :EXTERNSYNC "true"
  (srcCacheCount :uint32)
  (pSrcCaches (:pointer VkPipelineCache)) ;; :LEN "srcCacheCount"
)

(cffi:defcfun ("vkQueueBindSparse" vkQueueBindSparse) VkResult
  (queue VkQueue) ;; :EXTERNSYNC "true"
  (bindInfoCount :uint32) ;; :OPTIONAL "true"
  (pBindInfo (:pointer (:struct VkBindSparseInfo))) ;; :LEN "bindInfoCount" :EXTERNSYNC "pBindInfo[].pWaitSemaphores[],pBindInfo[].pSignalSemaphores[],pBindInfo[].pBufferBinds[].buffer,pBindInfo[].pImageOpaqueBinds[].image,pBindInfo[].pImageBinds[].image"
  (fence VkFence) ;; :OPTIONAL "true" :EXTERNSYNC "true"
)

(cffi:defcfun ("vkQueuePresentKHR" vkQueuePresentKHR) VkResult
  (queue VkQueue) ;; :EXTERNSYNC "true"
  (pPresentInfo (:pointer (:struct VkPresentInfoKHR))) ;; :EXTERNSYNC "pPresentInfo.pWaitSemaphores[],pPresentInfo.pSwapchains[]"
)

(cffi:defcfun ("vkQueueSubmit" vkQueueSubmit) VkResult
  (queue VkQueue) ;; :EXTERNSYNC "true"
  (submitCount :uint32) ;; :OPTIONAL "true"
  (pSubmits (:pointer (:struct VkSubmitInfo))) ;; :LEN "submitCount" :EXTERNSYNC "pSubmits[].pWaitSemaphores[],pSubmits[].pSignalSemaphores[]"
  (fence VkFence) ;; :OPTIONAL "true" :EXTERNSYNC "true"
)

(cffi:defcfun ("vkQueueWaitIdle" vkQueueWaitIdle) VkResult
  (queue VkQueue))

(defvkdevextfun ("vkRegisterDeviceEventEXT" vkRegisterDeviceEventEXT) VkResult
  (device VkDevice)
  (pDeviceEventInfo (:pointer (:struct VkDeviceEventInfoEXT)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks)))
  (pFence (:pointer VkFence)))

(defvkdevextfun ("vkRegisterDisplayEventEXT" vkRegisterDisplayEventEXT) VkResult
  (device VkDevice)
  (display VkDisplayKHR)
  (pDisplayEventInfo (:pointer (:struct VkDisplayEventInfoEXT)))
  (pAllocator (:pointer (:struct VkAllocationCallbacks)))
  (pFence (:pointer VkFence)))

(defvkdevextfun ("vkRegisterObjectsNVX" vkRegisterObjectsNVX) VkResult
  (device VkDevice)
  (objectTable VkObjectTableNVX) ;; :EXTERNSYNC "true"
  (objectCount :uint32)
  (ppObjectTableEntries (:pointer (:pointer (:struct VkObjectTableEntryNVX)))) ;; :LEN "objectCount"
  (pObjectIndices (:pointer :uint32)) ;; :LEN "objectCount"
)

(defvkinstextfun ("vkReleaseDisplayEXT" vkReleaseDisplayEXT) VkResult
  (physicalDevice VkPhysicalDevice)
  (display VkDisplayKHR))

(cffi:defcfun ("vkResetCommandBuffer" vkResetCommandBuffer) VkResult
  (commandBuffer VkCommandBuffer) ;; :EXTERNSYNC "true"
  (flags VkCommandBufferResetFlags) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkResetCommandPool" vkResetCommandPool) VkResult
  (device VkDevice)
  (commandPool VkCommandPool) ;; :EXTERNSYNC "true"
  (flags VkCommandPoolResetFlags) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkResetDescriptorPool" vkResetDescriptorPool) VkResult
  (device VkDevice)
  (descriptorPool VkDescriptorPool) ;; :EXTERNSYNC "true"
  (flags VkDescriptorPoolResetFlags) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkResetEvent" vkResetEvent) VkResult
  (device VkDevice)
  (event VkEvent) ;; :EXTERNSYNC "true"
)

(cffi:defcfun ("vkResetFences" vkResetFences) VkResult
  (device VkDevice)
  (fenceCount :uint32)
  (pFences (:pointer VkFence)) ;; :LEN "fenceCount" :EXTERNSYNC "true"
)

(cffi:defcfun ("vkSetEvent" vkSetEvent) VkResult
  (device VkDevice)
  (event VkEvent) ;; :EXTERNSYNC "true"
)

(defvkdevextfun ("vkSetHdrMetadataEXT" vkSetHdrMetadataEXT) :void
  (device VkDevice)
  (swapchainCount :uint32)
  (pSwapchains (:pointer VkSwapchainKHR)) ;; :LEN "swapchainCount"
  (pMetadata (:pointer (:struct VkHdrMetadataEXT))) ;; :LEN "swapchainCount"
)

(defvkdevextfun ("vkTrimCommandPoolKHR" vkTrimCommandPoolKHR) :void
  (device VkDevice)
  (commandPool VkCommandPool) ;; :EXTERNSYNC "true"
  (flags VkCommandPoolTrimFlagsKHR) ;; :OPTIONAL "true"
)

(cffi:defcfun ("vkUnmapMemory" vkUnmapMemory) :void
  (device VkDevice)
  (memory VkDeviceMemory) ;; :EXTERNSYNC "true"
)

(defvkdevextfun ("vkUnregisterObjectsNVX" vkUnregisterObjectsNVX) VkResult
  (device VkDevice)
  (objectTable VkObjectTableNVX) ;; :EXTERNSYNC "true"
  (objectCount :uint32)
  (pObjectEntryTypes (:pointer VkObjectEntryTypeNVX)) ;; :LEN "objectCount"
  (pObjectIndices (:pointer :uint32)) ;; :LEN "objectCount"
)

(defvkdevextfun ("vkUpdateDescriptorSetWithTemplateKHR" vkUpdateDescriptorSetWithTemplateKHR) :void
  (device VkDevice)
  (descriptorSet VkDescriptorSet) ;; :EXTERNSYNC "true"
  (descriptorUpdateTemplate VkDescriptorUpdateTemplateKHR)
  (pData (:pointer :void)))

(cffi:defcfun ("vkUpdateDescriptorSets" vkUpdateDescriptorSets) :void
  (device VkDevice)
  (descriptorWriteCount :uint32) ;; :OPTIONAL "true"
  (pDescriptorWrites (:pointer (:struct VkWriteDescriptorSet))) ;; :LEN "descriptorWriteCount" :EXTERNSYNC "pDescriptorWrites[].dstSet"
  (descriptorCopyCount :uint32) ;; :OPTIONAL "true"
  (pDescriptorCopies (:pointer (:struct VkCopyDescriptorSet))) ;; :LEN "descriptorCopyCount" :EXTERNSYNC "pDescriptorCopies[].dstSet"
)

(cffi:defcfun ("vkWaitForFences" vkWaitForFences) VkResult
  (device VkDevice)
  (fenceCount :uint32)
  (pFences (:pointer VkFence)) ;; :LEN "fenceCount"
  (waitAll VkBool32)
  (timeout :uint64))

